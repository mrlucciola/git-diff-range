#!/bin/sh

# -----------------------------------------------------------------------------
# Function: handle_output
#
# Handles output logic based on OUT_PATH and VERBOSE settings.
#
# - If OUT_PATH is set, writes DIFF_OUTPUT to the file.
# - If VERBOSE is true, also prints the output to stdout.
# - If OUT_PATH is not set, prints DIFF_OUTPUT to stdout by default.
#
# Globals Used:
#   OUT_PATH, VERBOSE, DIFF_OUTPUT
# -----------------------------------------------------------------------------
handle_output() {
  if [ -n "$OUT_PATH" ]; then
    if ! printf "%s\n" "$DIFF_OUTPUT" >"$OUT_PATH"; then
      echo "Error: Failed to write to '$OUT_PATH'" >&2
      exit 1
    fi

    [ "$VERBOSE" = "true" ] && printf "%s\n" "$DIFF_OUTPUT"
  else
    printf "%s\n" "$DIFF_OUTPUT"
  fi
}
#!/bin/sh

# -----------------------------------------------------------------------------
# Function: parse_args
#
# Parses CLI arguments into global variables.
#
# This function expects to be called with all CLI arguments (i.e. "$@").
# It supports the following optional flags:
#
#   -start-ref <git-ref>   : Starting Git reference (commit hash, branch, etc.)
#   -end-ref   <git-ref>   : Ending Git reference (defaults to HEAD if unset)
#   -repo-path <path>      : Filesystem path to Git repo (defaults to cwd)
#   -out-path  <file>      : File to write output to (if unset, prints to stdout)
#   -v                     : Verbose mode â€” prints to console even if out-path is set
#
# All values are stored in global variables:
#   START_REF, END_REF, REPO_PATH, OUT_PATH, VERBOSE
#
# Globals Set:
#   START_REF, END_REF, REPO_PATH, OUT_PATH, VERBOSE
#
# Called as:
#   parse_args "$@"
# -----------------------------------------------------------------------------
parse_args() {
  START_REF=""
  END_REF=""
  REPO_PATH="$(pwd)"
  OUT_PATH=""
  VERBOSE="false"

  while [ $# -gt 0 ]; do
    case "$1" in
    -start-ref)
      [ $# -lt 2 ] || echo "$2" | grep -q '^-' && {
        echo "Error: -start-ref requires a value" >&2
        exit 1
      }
      START_REF="$2"
      shift 2
      ;;
    -end-ref)
      [ $# -lt 2 ] || echo "$2" | grep -q '^-' && {
        echo "Error: -end-ref requires a value" >&2
        exit 1
      }
      END_REF="$2"
      shift 2
      ;;
    -repo-path)
      [ $# -lt 2 ] || echo "$2" | grep -q '^-' && {
        echo "Error: -repo-path requires a value" >&2
        exit 1
      }
      REPO_PATH="$2"
      shift 2
      ;;
    -out-path)
      [ $# -lt 2 ] || echo "$2" | grep -q '^-' && {
        echo "Error: -out-path requires a value" >&2
        exit 1
      }
      OUT_PATH="$2"
      shift 2
      ;;
    -v)
      VERBOSE="true"
      shift
      ;;
    *)
      echo "Invalid argument: $1" >&2
      exit 1
      ;;
    esac
  done
}
#!/bin/sh

# -----------------------------------------------------------------------------
# Function: resolve_defaults
#
# Sets default values for START_REF and END_REF if not provided by user.
# END_REF defaults to "HEAD".
# START_REF defaults to the commit before END_REF.
#
# Globals Used:
#   REPO_PATH, START_REF, END_REF
#
# Globals Set:
#   START_REF, END_REF
# -----------------------------------------------------------------------------
resolve_defaults() {
  # Determine effective END_REF
  [ -z "$END_REF" ] && END_REF="HEAD"

  # Resolve START_REF as previous commit if not provided
  if [ -z "$START_REF" ]; then
    prev_commit=$(git -C "$REPO_PATH" rev-parse "$END_REF^" 2>/dev/null || true)
    if [ -z "$prev_commit" ]; then
      echo "Error: No previous commit found for '$END_REF'" >&2
      exit 1
    fi
    START_REF="$prev_commit"
  fi
}
#!/bin/sh

# -----------------------------------------------------------------------------
# Function: run_git_diff
#
# Generates a Git diff between START_REF and END_REF in the specified REPO_PATH.
#
# Globals Used:
#   REPO_PATH, START_REF, END_REF
#
# Globals Set:
#   DIFF_OUTPUT
#
# Notes:
# - Uses 'git -C' to avoid changing the global working directory.
# - Exits on error if the diff cannot be generated.
# -----------------------------------------------------------------------------
run_git_diff() {
  if ! DIFF_OUTPUT=$(git -C "$REPO_PATH" diff "$START_REF" "$END_REF"); then
    echo "Error: Failed to generate diff from '$START_REF' to '$END_REF' in repo '$REPO_PATH'" >&2
    exit 1
  fi
}
#!/bin/sh

# Params:
# 1. "$REPO_PATH"
#
# Called as: validate_repo "$REPO_PATH"
validate_repo() {
  repo_path="$1"

  if [ ! -d "$repo_path/.git" ]; then
    echo "Error: '$repo_path' is not a Git repo." >&2
    exit 1
  fi
}

# Params:
# 1. "$REPO_PATH"
# 2. "$REF"
#
# Called as: validate_git_ref "$REPO_PATH" "$REF"
validate_git_ref() {
  repo_path="$1"
  ref="$2"

  if [ -z "$ref" ]; then
    echo "Error: Missing git ref for validation" >&2
    exit 1
  fi

  if ! git -C "$repo_path" cat-file -e "$ref^{commit}" 2>/dev/null; then
    echo "Error: Invalid git ref '$ref'" >&2
    exit 1
  fi
}
#!/bin/sh

# Entrypoint: calls `parse_args`, `run_git_diff`

main() {
  parse_args "$@"
  validate_repo "$REPO_PATH"
  resolve_defaults
  validate_git_ref "$REPO_PATH" "$END_REF"
  validate_git_ref "$REPO_PATH" "$START_REF"
  run_git_diff
  handle_output
}

main "$@"
